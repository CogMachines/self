<!DOCTYPE html>


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>10.3. Syntax overview</title>
    
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" /> 
  </head>
  <body role="document">

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="syntax-overview">
<h1>10.3. Syntax overview</h1>
<table border="1" class="docutils">
<colgroup>
<col width="15%" />
<col width="5%" />
<col width="79%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td>expression</td>
<td>→</td>
<td>constant | unary-message | binary-message | keyword-message | ‘(’ expression ‘)’</td>
</tr>
<tr class="row-even"><td>constant</td>
<td>→</td>
<td>self | number | string | object</td>
</tr>
<tr class="row-odd"><td>unary-message</td>
<td>→</td>
<td>receiver unary-send | resend ‘.’ unary-send</td>
</tr>
<tr class="row-even"><td>unary-send</td>
<td>→</td>
<td>identifier</td>
</tr>
<tr class="row-odd"><td>binary-message</td>
<td>→</td>
<td>receiver binary-send | resend ‘.’ binary-send</td>
</tr>
<tr class="row-even"><td>binary-send</td>
<td>→</td>
<td>operator expression</td>
</tr>
<tr class="row-odd"><td>keyword-message</td>
<td>→</td>
<td>receiver keyword-send | resend ‘.’ keyword-send</td>
</tr>
<tr class="row-even"><td>keyword-send</td>
<td>→</td>
<td>small-keyword expression { cap-keyword expression }</td>
</tr>
<tr class="row-odd"><td>receiver</td>
<td>→</td>
<td>[ expression ]</td>
</tr>
<tr class="row-even"><td>resend</td>
<td>→</td>
<td>resend | identifier</td>
</tr>
<tr class="row-odd"><td>object</td>
<td>→</td>
<td>regular-object | block</td>
</tr>
<tr class="row-even"><td>regular-object</td>
<td>→</td>
<td>‘(’ [ ‘|’ [ ‘{’ ‘}’ ‘=’ string ] slot-list ‘|’ ] [ code ] ‘)’</td>
</tr>
<tr class="row-odd"><td>block</td>
<td>→</td>
<td>‘[’ [ ‘|’ slot-list    ‘|’ ] [ code ] ‘]’</td>
</tr>
<tr class="row-even"><td>slot-list</td>
<td>→</td>
<td>{ unannotated-slot-list | annotated-slot-list }</td>
</tr>
<tr class="row-odd"><td>annotated-slot-list</td>
<td>→</td>
<td>‘{’ string slot-list ‘}’</td>
</tr>
<tr class="row-even"><td>unannotated-slot-list</td>
<td>→</td>
<td>{ slot ‘.’} slot [ ‘.’ ]</td>
</tr>
<tr class="row-odd"><td>code</td>
<td>→</td>
<td>{ expression ‘.’} [ ‘^’ ] expression [ ‘.’ ]</td>
</tr>
<tr class="row-even"><td>slot</td>
<td>→</td>
<td>arg-slot | data-slot | binary-slot | keyword-slot</td>
</tr>
<tr class="row-odd"><td>arg-slot</td>
<td>→</td>
<td>argument-name</td>
</tr>
<tr class="row-even"><td>data-slot</td>
<td>→</td>
<td>slot-name | slot-name ‘&lt;-’ expression | slot-name ‘=’ expression</td>
</tr>
<tr class="row-odd"><td>unary-slot</td>
<td>→</td>
<td>slot-name ‘=’ regular-object</td>
</tr>
<tr class="row-even"><td>binary-slot</td>
<td>→</td>
<td>operator ‘=’ regular-object | operator [identifier] ‘=’ regular-object</td>
</tr>
<tr class="row-odd"><td>keyword-slot</td>
<td>→</td>
<td>small-keyword {cap-keyword} ‘=’ regular-object | small-keyword identifier {cap-keyword identifier} ‘=’ regular-object</td>
</tr>
<tr class="row-even"><td>slot-name</td>
<td>→</td>
<td>identifier | parent-name</td>
</tr>
<tr class="row-odd"><td>parent-name</td>
<td>→</td>
<td>identifier ‘*’</td>
</tr>
</tbody>
</table>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>