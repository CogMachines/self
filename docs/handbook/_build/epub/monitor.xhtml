<!DOCTYPE html>


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>10.7. The system monitor</title>
    
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" /> 
  </head>
  <body role="document">

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-system-monitor">
<span id="pp-the-system-monitor"></span><h1>10.7. The system monitor</h1>
<p>The Self system contains a system monitor to display information about the internal workings of
the system such as memory management and compilation. It is invoked with <code class="docutils literal"><span class="pre">_Spy:</span></code> <code class="docutils literal"><span class="pre">true</span></code> (there
is are shortcuts in the shell, <code class="docutils literal"><span class="pre">spyOn</span></code> and <code class="docutils literal"><span class="pre">spyOff</span></code>). When it is active, the system monitor takes over
a portion of your screen with a window that looks like this:</p>
<div class="figure">
<img alt="_images/Chapter_5_Figure_7.png" src="_images/Chapter_5_Figure_7.png" />
</div>
<p>The indicators in the left part of the display correspond to various internal activities and events. On
the very left are the CPU bars which show how much CPU is used in various parts of the system.
The following table lists the individual indicators:</p>
<table border="1" class="docutils" id="id1">
<caption><span class="caption-number">Table 10.2 </span><span class="caption-text">The system monitor display: indicators</span></caption>
<colgroup>
<col width="13%" />
<col width="87%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">CPU</th>
<th class="head">Bar What It Means</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>VM</td>
<td>CPU time spent executing in the VM, i.e. for primitives, garbage collection etc.</td>
</tr>
<tr class="row-odd"><td>Lkup</td>
<td>CPU time used by compile-time and run-time lookups.</td>
</tr>
<tr class="row-even"><td>Comp</td>
<td>CPU time spent by the Self compilers. The black part stands for time consumed by the non-inling
compiler (NIC), the gray part for the simple inlining compiler (SIC).</td>
</tr>
<tr class="row-odd"><td>Self</td>
<td>CPU time spent executing compiled Self code. The black part stands for time consumed by
unoptimized (NIC) code, the gray part for optimized (SIC) code.</td>
</tr>
<tr class="row-even"><td>CPU</td>
<td>This bar displays the percentage of the CPU that the Self process is getting (a completely filled
bar equals 100% CPU utilization by Self). Black stands for user time, gray for system time.</td>
</tr>
<tr class="row-odd"><td>Dot</td>
<td>Below the CPU bar is a small dot which moves whenever a process switch takes place.</td>
</tr>
</tbody>
</table>
<p></p>
<table border="1" class="docutils">
<colgroup>
<col width="13%" />
<col width="87%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Indicator</th>
<th class="head">What It Means</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>X-compiling Y</td>
<td>The X compiler (where X is either “nic” or “sic”) is compiling the method named Y into machine
code.</td>
</tr>
<tr class="row-odd"><td>scavenge</td>
<td>The Self object memory is being scavenged. A scavenge is a fast, partial garbage collection (see
<a class="reference internal" href="ref.xhtml#citations"><span class="std std-ref">[Ung84]</span></a> , <a class="reference internal" href="ref.xhtml#citations"><span class="std std-ref">[Ung86]</span></a> , <a class="reference internal" href="ref.xhtml#citations"><span class="std std-ref">[Lee88]</span></a> ).</td>
</tr>
<tr class="row-even"><td>GC</td>
<td>The Self object memory is being fully garbage-collected.</td>
</tr>
<tr class="row-odd"><td>flushing</td>
<td>Self is flushing the code cache.</td>
</tr>
<tr class="row-even"><td>compacting</td>
<td>Self is compacting the code cache.</td>
</tr>
<tr class="row-odd"><td>reclaiming</td>
<td>Self is reclaiming space in the code cache to make room for a new method.</td>
</tr>
<tr class="row-even"><td>sec reclaim</td>
<td>Self is flushing some methods in the code cache because there is not enough room in one of the
secondary caches (the caches holding the debugging and dependency information).</td>
</tr>
<tr class="row-odd"><td>ic flush</td>
<td>Self is flushing all inline caches.</td>
</tr>
<tr class="row-even"><td>LRU sweep</td>
<td>Self is examining methods in the code cache to determine whether they have been used recently.</td>
</tr>
<tr class="row-odd"><td>page N N</td>
<td>page faults occurred during the last time interval (N is not displayed if N=1). The time interval
currently is 1/25 of a second.</td>
</tr>
<tr class="row-even"><td>read</td>
<td>Self is blocked reading from a “slow” device, e.g., the keyboard or mouse.</td>
</tr>
<tr class="row-odd"><td>write</td>
<td>Self is blocked writing to a “slow” device, e.g., the screen.</td>
</tr>
<tr class="row-even"><td>disk in/out</td>
<td>Self is doing disk I/O.</td>
</tr>
<tr class="row-odd"><td>UNIX</td>
<td>Self is blocked in some UNIX system call other than read or write.</td>
</tr>
<tr class="row-even"><td>idle</td>
<td>Self has nothing to do. (shows up only when using processes.)</td>
</tr>
</tbody>
</table>
<p>The middle part of the display contains some information on VM memory usage displayed in textual
form, as described below:</p>
<table border="1" class="docutils" id="id2">
<caption><span class="caption-number">Table 10.3 </span><span class="caption-text">VM memory status information</span></caption>
<colgroup>
<col width="13%" />
<col width="87%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Name</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>RSRC</td>
<td>Size and utilization of the resource area (an area of memory used for temporary storage by the
compiler and by primitives).</td>
</tr>
<tr class="row-odd"><td>C-Heap</td>
<td>Number of bytes allocated on the C heap by Self (excluding the memory and code spaces and the
resource area).</td>
</tr>
</tbody>
</table>
<p>The memory status portion of the system monitor consists of bars representing memory spaces and
their utilization; all bars are drawn to scale relative to one another, their areas being proportional
to the actual sizes of the memory spaces. The next table explains the details of this part of the system
monitor’s display.</p>
<table border="1" class="docutils" id="id3">
<caption><span class="caption-number">Table 10.4 </span><span class="caption-text">The system monitor display: memory status</span></caption>
<colgroup>
<col width="12%" />
<col width="88%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Space</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>object memory</td>
<td>The four (or more) bars represent (from top to bottom) eden, the two survivor spaces, and subsequent
bars are segments of old space. The left and right parts of each bar represent the space used
by “plain” objects and byte vectors, respectively. The above picture shows a situation in which
about half of old space is filled with plain objects and about 25% is filled with byte vectors. A fraction
of old space’s used portions is currently paged out (gray areas).
Below the old space is a ruler, marked in 1Mb intervals, showing the total allocated in old space
(extending line at the left). To the right is a red bar representing how much of old space is reserved
for use by the Virtual Machine, and a yellow bar representing the low space threshold (when
crossed, the scheduler is notified and a garbage colelction may take place).</td>
</tr>
<tr class="row-odd"><td>code cache</td>
<td>These four bars represent the cache holding compiled methods with their associated debugging and
dependency information. The bar labelled ‘code’ represents the cache containing the actual
machine code for methods (including some headers and relocation information); it is divided into
code generated by the primary (non-inlining) compiler, or NIC, and code generated by the
secondary, smarter compiler (SIC). The cache represented by the bar labelled ‘deps’ contains
dependency information for the compiled methods, and the cache represented by the bar labelled
‘debug’ contains the debugging information. The three-way split reduces the working set size of the
code cache. The cache represented by the bar labelled ‘PICs’ contains polymorphic inline caches.</td>
</tr>
</tbody>
</table>
<p></p>
<table border="1" class="docutils">
<colgroup>
<col width="11%" />
<col width="89%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Color</th>
<th class="head">Meaning</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>black</td>
<td>Allocated, residing in real memory.</td>
</tr>
<tr class="row-odd"><td>gray</td>
<td>Allocated, paged out.</td>
</tr>
<tr class="row-even"><td>white</td>
<td>Unallocated memory.</td>
</tr>
</tbody>
</table>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>